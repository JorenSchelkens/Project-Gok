@page "/crash"
@using CrashDomain
@using System.Threading;

<h1 style="text-align: center;"> Crash Gambling </h1>

@if (temp)
{
    <div style="text-align: center; top: 600px;">
        <MatNumericUpDownField Label="Inzet:"
                               @bind-Value=@testingNullableDecimal1
                               Step="10"
                               DecimalPlaces="0">
        </MatNumericUpDownField>
    </div>

    <div style="text-align: center; top: 600px; left: 600px;">
        <MatNumericUpDownField Label="Automatisch stoppen op:"
                               @bind-Value=@testingNullableDecimal2
                               Step="1.00m"
                               DecimalPlaces="2">
        </MatNumericUpDownField>
    </div>

    <div style="text-align: center; position: relative; top: 300px;">
        <MatButton OnClick="@Click" Raised="true">Start game</MatButton>
    </div>

}
else
{
    <p style="text-align: center; font-size:100px; margin-top:100px;">@Game.multiplier</p>
    <MatProgressBar Indeterminate="@progressBar"></MatProgressBar>
    <p style="text-align: center; font-size: 80px; margin-top:200px;">@crash</p>

}


@code {

    decimal? testingNullableDecimal1 = 0;
    decimal? testingNullableDecimal2 = 0;

    public CrashDomain.Game Game { get; set; }

    public bool temp = true;
    public int tempInt = 2;
    public bool progressBar = true;
    public String crash = null;

    protected override void OnInitialized()
    {
        Game = new Game();
    }

    public async void Click()
    {
        Game.muntenIngezet = (int)testingNullableDecimal1.Value;
        temp = false;

        double i = 0.00;

        while(i + 0.01 <= Game.totalMultiplier)
        {

            Game.GeefDoor(i);
            this.StateHasChanged();

            await Task.Delay(Game.delay);

            i += 0.01;

        }

        progressBar = false;
        crash = "Crash";

        this.StateHasChanged();

    }

}
