@page "/crash"
@using CrashDomain
@using System.Threading;

<h1 style="text-align: center;"> Crash Gambling </h1>



@if (temp)
{
    <div style="text-align: center; top: 600px;">
        <MatNumericUpDownField Label="Inzet:"
                               @bind-Value=@testingNullableDecimal1
                               Step="10"
                               DecimalPlaces="0">
        </MatNumericUpDownField>
    </div>

    <div style="text-align: center; top: 600px; left: 600px;">
        <MatNumericUpDownField Label="Automatisch stoppen op:"
                               @bind-Value=@testingNullableDecimal2
                               Step="1.00m"
                               DecimalPlaces="2">
        </MatNumericUpDownField>
    </div>

    <div style="text-align: center; position: relative; top: 300px;">
        <MatButton OnClick="@Click" Raised="true">Start game</MatButton>
    </div>

}
else
{
    <p style="text-align: center; font-size:100px; margin-top:100px;">@Game.multiplier</p>
    <MatProgressBar Indeterminate="true"></MatProgressBar>
    <ChartPrimaryXAxis ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.Category" Minimum="0" Maximum="20" Interval="1"></ChartPrimaryXAxis>
    <EjsChart Title="Status" Width="100px">

        <ChartPrimaryYAxis RangePadding="ChartRangePadding.None" Minimum="0" Maximum="15"
                           Interval="1.0">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <EjsDataManager></EjsDataManager>

        <ChartSeriesCollection>
            <ChartSeries DataSource="@CrashGegevens" XName="X" YName="Y" Type="ChartSeriesType.Line">
            </ChartSeries>
        </ChartSeriesCollection>

    </EjsChart>
}



@code {

    decimal? testingNullableDecimal1 = 0;
    decimal? testingNullableDecimal2 = 0;

    public CrashDomain.Game Game { get; set; }

    public bool temp = true;
    public int tempInt = 2;

    protected override void OnInitialized()
    {
       /* Game = new Game((int)testingNullableDecimal1.Value);*/
    }

    public async void Click()
    {
        temp = false;

        Game.totalMultiplier = (double)new Random().Next(10, 15);


       /*Timer timer = new TimerCallback(_ =>
        {
            if (game.Time > 0)
            {
                game.Time--;
                Progress -= (1 / (double)DontTapWhiteSetting.Time);

                if (game.Time <= 0)
                {
                    game.Dies();
                    StartDisable = false;
                }

                this.InvokeAsync(() => this.StateHasChanged());

            }

        }), null, 1000, 1000);*/

    }

}
