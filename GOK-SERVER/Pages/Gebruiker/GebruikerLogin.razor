@page "/gebruiker/login"
@inject NavigationManager NavigationManager
@inject IMatToaster Toaster
@inject DefaultClasses.Gebruiker HuidigeGebruiker

<h1 style="margin-bottom: 15px;">Inloggen</h1>

@if (HuidigeGebruiker.Gebruikersnaam == null)
{
    <MatTextField @bind-Value="@Naam" Label="Gebruikersnaam" FullWidth="true" Required="true" @onkeyup="CheckKey"></MatTextField>
    <MatTextField @bind-Value="@Wachtwoord" Label="Wachtwoord" FullWidth="true" Type="password" Required="true" @onkeyup="CheckKey"></MatTextField>

    <br />

    <MatButton Type="submit" Style="width: 110px; height: 40px;" OnClick="@Login" Raised="true">Inloggen</MatButton>
}
else
{
    CheckGebruiker();
}

@code {

    public DefaultClasses.DBConnection DBConnection { get; set; }
    public DefaultClasses.Gebruiker Gebruiker;

    string Naam;
    string Wachtwoord;

    protected override void OnInitialized()
    {
        DBConnection = new DefaultClasses.DBConnection();
    }

    private void Login()
    {
        if (Naam == null)
        {
            Toaster.Add("Gebruikersnaam is verplicht", MatToastType.Danger, "Error");
        }
        else if (Wachtwoord == null)
        {
            Toaster.Add("Wachtwoord is verplicht", MatToastType.Danger, "Error");
        }
        else
        {
            Gebruiker = DBConnection.LogGebruikerIn(Naam, Wachtwoord);
            HuidigeGebruiker.Update(Gebruiker.Spelersnummer, Gebruiker.Gebruikersnaam, Gebruiker.Naam, Gebruiker.Email, Gebruiker.Wachtwoord, Gebruiker.Saldo, Gebruiker.DailyGiftDatum, Gebruiker.Admin, Gebruiker.Nieuwsbrief, Gebruiker.Notificaties);

            CheckGebruiker();
        }

    }

    private void CheckGebruiker()
    {
        if (!(string.IsNullOrEmpty(HuidigeGebruiker.Naam)))
        {
            CheckDailyGift();
            GaNaarVolgende();
        }
        else
        {
            Toaster.Add("Gebruikersnaam of wachtwoord is niet correct", MatToastType.Danger, "Error");
        }
    }

    public void CheckKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            this.Login();
        }
    }

    public void CheckDailyGift()
    {
        DateTime now = DateTime.Now;
        DateTime dateTimeGebruiker = HuidigeGebruiker.DailyGiftDatum;
        dateTimeGebruiker = dateTimeGebruiker.AddDays(1);

        if (now.Date >= dateTimeGebruiker.Date)
        {
            HuidigeGebruiker.Saldo += 5;

            Toaster.Add("U heeft 5 munten ontvangen", MatToastType.Success, "Dailygift ontvangen!");
            Gebruiker.Refresh();
        }

        HuidigeGebruiker.DailyGiftDatum = DateTime.Now;
        DBConnection.UpdateGebruiker(HuidigeGebruiker);
    }

    public void GaNaarVolgende()
    {
        NavigationManager.NavigateTo("/gebruiker/profiel");
    }
}