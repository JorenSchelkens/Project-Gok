@page "/bank"
@inject DefaultClasses.Gebruiker Gebruiker

@if (Bank == null)
{
    <p>Loading...</p>
}
else
{
    <p>Huidig Balans: @Gebruiker.Saldo munten</p>

    <MatNumericUpDownField Label="Withdrawal"
                           @bind-Value=@UpDownFieldWithdrawal
                           DecimalPlaces=0
                           Icon="account_balance_wallet"
                           Minimum="1" Maximum="@Gebruiker.Saldo">

    </MatNumericUpDownField>
    <MatButton OnClick="@Withdrawal" Raised="true">Withdrawal</MatButton>

    <br />
    <br />

    <MatNumericUpDownField Label="Deposit: 1$ = 100 munten"
                           @bind-Value=@UpDownFieldDeposit
                           DecimalPlaces=2
                           Step="1.00m"
                           Icon="attach_money"
                           Minimum="5.00m" Maximum="1000">

    </MatNumericUpDownField>
    <MatButton OnClick="@Deposit" Raised="true">Deposit</MatButton>
}

@code {

    public DefaultClasses.DBConnection DBConnection { get; set; }

    public Bank Bank;

    decimal? UpDownFieldWithdrawal = null;
    decimal? UpDownFieldDeposit = null;

    protected override void OnInitialized()
    {
        DBConnection = new DefaultClasses.DBConnection();
        Bank = new Bank(Gebruiker.Saldo);
    }

    public void Deposit()
    {
        Gebruiker.Saldo = Bank.Storten((double)UpDownFieldDeposit.Value);
        updateGebruiker();
    }

    public void Withdrawal()
    {
        Gebruiker.Saldo = Bank.Afhalen((int)UpDownFieldWithdrawal.Value);
        updateGebruiker();
    }

    private void updateGebruiker()
    {
        Gebruiker.Refresh();
        DBConnection.UpdateGebruiker(Gebruiker);
    }

}