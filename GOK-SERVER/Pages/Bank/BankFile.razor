@page "/bank"
@inject DefaultClasses.Gebruiker Gebruiker
@inject IMatToaster Toaster

@if (Bank == null)
{
    <p>Loading...</p>
}
else
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p>Huidige balans: @Gebruiker.Saldo munten</p>
            </div>

            @if (Gebruiker.Saldo > 0)
            {
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <MatNumericUpDownField Label="Munten afhalen"
                                           Style="width: 100%;"
                                           @bind-Value=@UpDownFieldWithdrawal
                                           DecimalPlaces=0
                                           Icon="account_balance_wallet"
                                           Minimum="1" Maximum="@Gebruiker.Saldo">

                    </MatNumericUpDownField>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <MatButton Style="width: 203px; height: 50px; margin-bottom: 16px; margin-left: 10px;" OnClick="@Withdrawal" Raised="true">Munten Afhalen</MatButton>
                </div>
            }
            else
            {
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                    <p>
                        U heeft niet genoeg munten. Gelieve eerst geld over te schrijven.
                    </p>
                </div>
            }

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12"></div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                <MatNumericUpDownField Label="Geld overschrijven: 1$ = 100 munten"
                                       Style="width: 100%;"
                                       @bind-Value=@UpDownFieldDeposit
                                       DecimalPlaces=2
                                       Step="1.00m"
                                       Icon="attach_money"
                                       Minimum="5.00m" Maximum="1000">

                </MatNumericUpDownField>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                <MatButton Style="width: 203px; height: 50px; margin-bottom: 16px; margin-left: 10px;" OnClick="@Deposit" Raised="true">Geld overschrijven</MatButton>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12"></div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatButton Style="width: 203px; height: 50px; margin-bottom: 16px; margin-left: 10px;" OnClick="@OpenDialog" Raised="true">Giftcard gebruiken</MatButton>

                <MatDialog @bind-IsOpen="@dialogIsOpen">
                    <MatDialogTitle>Giftcard</MatDialogTitle>
                    <MatDialogContent>
                        <MatTextField @bind-Value="@giftcode" Label="Code" Required="true"></MatTextField>
                    </MatDialogContent>
                    <MatDialogActions>
                        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Terug</MatButton>
                        <MatButton OnClick="@OkClick">OK</MatButton>
                    </MatDialogActions>
                </MatDialog>
            </div>
        </div>
    </div>

}

@code {

    public DefaultClasses.DBConnection DBConnection { get; set; }
    public DefaultClasses.DataBase.GiftCard GiftCard { get; set; } = null;
    public Bank Bank;

    public decimal? UpDownFieldWithdrawal = null;
    public decimal? UpDownFieldDeposit = null;

    public double procent = 1;

    public string giftcode = "";

    public bool dialogIsOpen = false;

    protected override void OnInitialized()
    {
        DBConnection = new DefaultClasses.DBConnection();
        Bank = new Bank(Gebruiker.Saldo);
    }

    public void Deposit()
    {
        if (UpDownFieldDeposit.HasValue)
        {
            double temp = (double)UpDownFieldDeposit.Value * procent;

            Gebruiker.Saldo = Bank.Storten(temp);
            updateGebruiker();

            Toaster.Add("Bedrag toegevoegd", MatToastType.Success, "Succes");

            Reset(true);
        }
        else
        {
            Toaster.Add("Geen waarde gevonden", MatToastType.Danger, "Error");
        }
    }

    public void Withdrawal()
    {
        if (UpDownFieldWithdrawal.HasValue)
        {
            Gebruiker.Saldo = Bank.Afhalen((int)UpDownFieldWithdrawal.Value);
            updateGebruiker();

            Toaster.Add("Bedrag afgehaald", MatToastType.Success, "Succes");

            Reset(false);
        }
        else
        {
            Toaster.Add("Geen waarde gevonden", MatToastType.Danger, "Error");
        }
    }

    public void OpenDialog()
    {
        giftcode = "";
        dialogIsOpen = true;
    }

    public void OkClick()
    {
        GiftCard = DBConnection.GetGiftCard(giftcode);

        if (GiftCard != null)
        {
            if (GiftCard.UsesLeft > 0)
            {
                if (GiftCard.isSaldo())
                {
                    Gebruiker.Saldo += GiftCard.TeOntvangenSaldo;
                    updateGebruiker();

                    Toaster.Add("Bedrag Toegevoegd", MatToastType.Success, "Succes");
                }
                else
                {
                    procent = (GiftCard.KortingProcent / 100.00) + 1.00;
                    Toaster.Add("Korting toegevoegd", MatToastType.Success, "Succes");
                }

                DBConnection.UpdateGiftcard(GiftCard);
            }
            else
            {
                Toaster.Add("Giftcard niet meer geldig", MatToastType.Danger, "Te laat!");
            }

        }
        else
        {
            Toaster.Add("Giftcard bestaat niet", MatToastType.Danger, "Error");
        }

        Reset(false);
    }

    public void Reset(bool resetProcent)
    {
        if (resetProcent)
        {
            procent = 1;
        }

        giftcode = "";
        dialogIsOpen = false;
        GiftCard = null;

        this.StateHasChanged();
    }

    private void updateGebruiker()
    {
        Gebruiker.Refresh();
        DBConnection.UpdateGebruiker(Gebruiker);
    }

}